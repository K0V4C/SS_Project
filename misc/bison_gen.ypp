%{
#include <iostream>
#include <string>
#include <vector>
#include <stdint.h>
#include <memory>
#include <stdint.h>
#include <variant>
#include "inc/asembler/parser.hpp"
#include "inc/asembler/collector.hpp"

#include "inc/asembler/asembler.hpp"
#include "inc/asembler/asm_actions/actions.hpp"
#include "inc/asembler/asm_actions/directive_actions.hpp"
#include "inc/asembler/asm_actions/instruction_actions.hpp"
#include "inc/asembler/asm_actions/label_actions.hpp"

extern int yylex();
extern int yyparse();
extern FILE* yyin;

extern int yylex(void);
%}


%union {
    int32_t num;
    char* sym;
}

%token COMMENT

%token SEMYCOLON COLON COMMA NEW_LINE

%token GLOBAL EXTERN SECTION WORD SKIP ASCII EQU END

%token HALT INT IRET CALL RET JMP BEQ BNE BGT PUSH POP XCHG
%token ADD SUB MUL DIV NOT AND OR XOR SHL SHR LD ST CSRRD CSRWR

%token PLUS MINUS MULTIPLY DIVISION LEFT_BRACKET RIGHT_BRACKET

%token DOLLAR_SIGN

%token<sym> IDENTIFIER
%token<num> REGISTER
%token STATUS_REG HANDLER_REG CAUSE_REG SP_REG PC_REG
%token<num> DECIMAL_NUM
%token<num> HEX_NUM

%token<sym> STRING
%token END_OF_FILE

%type<num> literal

%%

program:
| program label
| program END_OF_FILE {return 1;}
| program directive
| program NEW_LINE
| program instruction
;

label:
    IDENTIFIER COLON {
        
        // TODO: fix this here for IDENTIFIER 

        auto str = std::string($1);
        str.pop_back();

        Asembler::file_actions.push_back(
            std::make_unique<label>(str)
        );
    }
;

symbols:
    IDENTIFIER {
        auto& c = Collector::get_instance();
        sym_or_lit new_element = std::string($1);
        c.add_symbol_or_literal(new_element);
    }
|   symbols COMMA IDENTIFIER {
        auto& c = Collector::get_instance();
        sym_or_lit new_element = std::string($3);
        c.add_symbol_or_literal(new_element);
    }
|   literal  {
        auto& c = Collector::get_instance();
        sym_or_lit new_element = $1;
        c.add_symbol_or_literal(new_element);
    }
|   symbols COMMA literal {
        auto& c = Collector::get_instance();
        sym_or_lit new_element = $3;
        c.add_symbol_or_literal(new_element); 
    }
;

literal:
    DECIMAL_NUM { $$ = $1;}
|   HEX_NUM     { $$ = $1;}
;

branch_operand:
    IDENTIFIER {
        sym_or_lit op;
        op = std::string($1);
        Collector::get_instance().add_symbol_or_literal(op);
    }
|   literal    {
        sym_or_lit op;
        op = $1;
        Collector::get_instance().add_symbol_or_literal(op);
    }
;

gpr:
    REGISTER {Collector::get_instance().append_gpr($1) ;}
|   SP_REG   {Collector::get_instance().append_gpr(14) ;}
|   PC_REG   {Collector::get_instance().append_gpr(15) ;}
;

instruction:
    halt_instruction
|   int_instruction
|   iret_instruction
|   call_instruction
|   ret_instruction
|   jmp_instruction
|   beq_instruction
|   bne_instruction
|   bgt_instruction
|   push_instruction
|   pop_instruction
|   xchg_instrucion
|   add_instruction
|   sub_instrucion
|   mul_instruction
|   div_instruction
|   not_instruction
|   and_instruction
|   or_instruction
|   xor_instruction
|   shl_instruction
|   shr_instruction
|   ld_instruction
|   st_instruction
|   csrrd_instruction
|   csrwr_instruction
;

halt_instruction:
    HALT { 
        Asembler::file_actions.push_back(
            std::make_unique<instruction_halt>()
        ); 
    }
;

int_instruction:
    INT {
        Asembler::file_actions.push_back(
            std::make_unique<instruction_int>()
        );
    }
;

iret_instruction:
    IRET {
        Asembler::file_actions.push_back(
            std::make_unique<instruction_iret>()
        );
    }
;

call_instruction:
    CALL branch_operand {
        auto& c = Collector::get_instance();
        auto new_element = c.get_symbols_and_literals()[0];

        /*Asembler::file_actions.push_back(
            std::make_unique<instruction_call>(new_element)
        );*/

        c.clear_symbols_and_literals();
    }
;

ret_instruction:
    RET {
        Asembler::file_actions.push_back(
            std::make_unique<instruction_ret>()
        );
    }
;

jmp_instruction:
    JMP branch_operand {
        auto& c = Collector::get_instance();
        auto new_symbol = c.get_symbols_and_literals()[0];

        Asembler::file_actions.push_back(
            std::make_unique<instruction_jmp>(new_symbol)
        ); 

        c.clear_symbols_and_literals();
    }
;

beq_instruction:
    BEQ gpr COMMA gpr COMMA branch_operand {

        auto& c = Collector::get_instance();
        auto new_symbol = c.get_symbols_and_literals()[0];
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_beq>(new_symbol, gpr_regs[0], gpr_regs[1])
        ); 

        c.clear_gpr_list();
        c.clear_symbols_and_literals();

    }
;

bne_instruction:
    BNE gpr COMMA gpr COMMA branch_operand {

        auto& c = Collector::get_instance();
        auto new_symbol = c.get_symbols_and_literals()[0];
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_bne>(new_symbol, gpr_regs[0], gpr_regs[1])
        ); 

        c.clear_gpr_list();
        c.clear_symbols_and_literals();

    }
;

bgt_instruction:
    BGT gpr COMMA gpr branch_operand {

        auto& c = Collector::get_instance();
        auto new_symbol = c.get_symbols_and_literals()[0];
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_bgt>(new_symbol, gpr_regs[0], gpr_regs[1])
        ); 

        c.clear_gpr_list();
        c.clear_symbols_and_literals();

    }
;

push_instruction:
    PUSH gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_push>(gpr_regs[0])
        ); 

        c.clear_gpr_list();
    }
;

pop_instruction:
    POP gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_pop>(gpr_regs[0])
        ); 

        c.clear_gpr_list();
    }
;

xchg_instrucion:
    XCHG gpr COMMA gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_xchg>(gpr_regs[0], gpr_regs[1])
        ); 

        c.clear_gpr_list();
    }
;

add_instruction:
    ADD gpr COMMA gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_add>(gpr_regs[0], gpr_regs[1])
        ); 

        c.clear_gpr_list();
    }
;

sub_instrucion:
    SUB gpr COMMA gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_sub>(gpr_regs[0], gpr_regs[1])
        ); 

        c.clear_gpr_list();
    }
;

mul_instruction:
    MUL gpr COMMA gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_mul>(gpr_regs[0], gpr_regs[1])
        ); 

        c.clear_gpr_list();
    }
;

div_instruction:
    DIV gpr COMMA gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_div>(gpr_regs[0], gpr_regs[1])
        ); 

        c.clear_gpr_list();
    }
;

not_instruction:
    NOT gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_not>(gpr_regs[0])
        ); 

        c.clear_gpr_list();
    }
;

and_instruction:
    AND gpr COMMA gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_and>(gpr_regs[0], gpr_regs[1])
        ); 

        c.clear_gpr_list();
    }
;

or_instruction:
    OR gpr COMMA gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_or>(gpr_regs[0], gpr_regs[1])
        ); 

        c.clear_gpr_list();
    }
;

xor_instruction:
    XOR gpr COMMA gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_xor>(gpr_regs[0], gpr_regs[1])
        ); 

        c.clear_gpr_list();
    }
;

shl_instruction:
    SHL gpr COMMA gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_shl>(gpr_regs[0], gpr_regs[1]) 
        ); 

        c.clear_gpr_list();
    }
;

shr_instruction:
   SHR gpr COMMA gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_shr>(gpr_regs[0], gpr_regs[1]) 
        ); 

        c.clear_gpr_list();
    }
;

ld_instruction:
    LD DOLLAR_SIGN literal COMMA gpr {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = $3;

        Asembler::file_actions.push_back(
            std::make_unique<instruction_ld>(sol, 0, gpr_regs[0], OPERANDS::D_LIT) 
        ); 

        c.clear_gpr_list();
    }
|   LD DOLLAR_SIGN IDENTIFIER COMMA gpr {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = std::string($3);

        Asembler::file_actions.push_back(
            std::make_unique<instruction_ld>(sol, 0, gpr_regs[0], OPERANDS::D_SYM)
        ); 

        c.clear_gpr_list();
    }
|   LD literal COMMA gpr {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = $2;

        Asembler::file_actions.push_back(
            std::make_unique<instruction_ld>(sol, 0, gpr_regs[0], OPERANDS::LIT) 
        ); 

        c.clear_gpr_list();

    }
|   LD IDENTIFIER COMMA gpr {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = std::string($2);

        Asembler::file_actions.push_back(
            std::make_unique<instruction_ld>(sol, 0, gpr_regs[0], OPERANDS::SYM) 
        ); 

        c.clear_gpr_list();

    }
|   LD gpr COMMA gpr {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = "";

        Asembler::file_actions.push_back(
            std::make_unique<instruction_ld>(sol, gpr_regs[0], gpr_regs[1], OPERANDS::REG) 
        ); 

        c.clear_gpr_list();

    }
|   LD LEFT_BRACKET gpr RIGHT_BRACKET COMMA gpr {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = "";

        Asembler::file_actions.push_back(
            std::make_unique<instruction_ld>(sol, gpr_regs[0], gpr_regs[1], OPERANDS::REG_IND)
        ); 

        c.clear_gpr_list();

    }
|   LD LEFT_BRACKET gpr PLUS literal RIGHT_BRACKET COMMA gpr {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = $5;

        Asembler::file_actions.push_back(
            std::make_unique<instruction_ld>(sol, gpr_regs[0], gpr_regs[1], OPERANDS::REG_IND_DISP_LIT)
        ); 

        c.clear_gpr_list();

    }
|   LD LEFT_BRACKET gpr PLUS IDENTIFIER RIGHT_BRACKET COMMA gpr {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = std::string($5);

        Asembler::file_actions.push_back(
            std::make_unique<instruction_ld>(sol, gpr_regs[0], gpr_regs[1], OPERANDS::REG_IND_DISP_SYM) 
        ); 

        c.clear_gpr_list();
    }
;

st_instruction:
    ST gpr COMMA DOLLAR_SIGN literal {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = $5;

        Asembler::file_actions.push_back(
            std::make_unique<instruction_st>(sol, gpr_regs[0], 0, OPERANDS::D_LIT) 
        ); 

        c.clear_gpr_list();
    }
|   ST gpr COMMA DOLLAR_SIGN IDENTIFIER {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = std::string($5);

        Asembler::file_actions.push_back(
            std::make_unique<instruction_st>(sol, gpr_regs[0], 0, OPERANDS::D_SYM)
        ); 

        c.clear_gpr_list();

    }
|   ST gpr COMMA literal {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = $4;

        Asembler::file_actions.push_back(
            std::make_unique<instruction_st>(sol, gpr_regs[0], 0, OPERANDS::LIT)
        ); 

        c.clear_gpr_list();

    }
|   ST gpr COMMA IDENTIFIER {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = std::string($4);

        Asembler::file_actions.push_back(
            std::make_unique<instruction_st>(sol, gpr_regs[0], 0, OPERANDS::SYM)
        ); 

        c.clear_gpr_list();

    }
|   ST gpr COMMA gpr {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = std::string("");

        Asembler::file_actions.push_back(
            std::make_unique<instruction_st>(sol, gpr_regs[0], gpr_regs[1], OPERANDS::REG)
        ); 

        c.clear_gpr_list();

    }
|   ST gpr COMMA LEFT_BRACKET gpr RIGHT_BRACKET {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = std::string("");

        Asembler::file_actions.push_back(
            std::make_unique<instruction_st>(sol, gpr_regs[0], gpr_regs[1], OPERANDS::REG_IND)
        ); 

        c.clear_gpr_list();

    }
|   ST gpr COMMA LEFT_BRACKET gpr PLUS literal RIGHT_BRACKET {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = $7;

        Asembler::file_actions.push_back(
            std::make_unique<instruction_st>(sol, gpr_regs[0], gpr_regs[1], OPERANDS::REG_IND_DISP_LIT)
        ); 

        c.clear_gpr_list();

    }
|   ST gpr COMMA LEFT_BRACKET gpr PLUS IDENTIFIER RIGHT_BRACKET {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        sym_or_lit sol = std::string($7);

        Asembler::file_actions.push_back(
            std::make_unique<instruction_st>(sol, gpr_regs[0], gpr_regs[1], OPERANDS::REG_IND_DISP_SYM)
        ); 

        c.clear_gpr_list();

    }
;

csrrd_instruction:
    CSRRD STATUS_REG COMMA gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_csrrd>(gpr_regs[0], REGISTERS::STATUS) 
        ); 

        c.clear_gpr_list();
    }
|   CSRRD HANDLER_REG COMMA gpr {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_csrrd>(gpr_regs[0], REGISTERS::HANDLER) 
        ); 

        c.clear_gpr_list();
    }
|   CSRRD CAUSE_REG COMMA gpr {

        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_csrrd>(gpr_regs[0], REGISTERS::CAUSE) 
        ); 

        c.clear_gpr_list();

    }
;

csrwr_instruction:
    CSRWR gpr COMMA STATUS_REG {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_csrwr>(gpr_regs[0], REGISTERS::STATUS) 
        ); 

        c.clear_gpr_list();
    }
|   CSRWR gpr COMMA HANDLER_REG {

            auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_csrwr>(gpr_regs[0], REGISTERS::HANDLER) 
        ); 

        c.clear_gpr_list();
    }
|   CSRWR gpr COMMA CAUSE_REG {
        auto& c = Collector::get_instance();
        auto gpr_regs = c.get_gpr_list();

        Asembler::file_actions.push_back(
            std::make_unique<instruction_csrwr>(gpr_regs[0], REGISTERS::CAUSE) 
        ); 

        c.clear_gpr_list();
    }
;

directive:
    global_directive
|   extern_directive
|   section_directive
|   word_directive
|   skip_directive
|   ascii_directive
|   equ_directive
|   end_directive
;

global_directive:
    GLOBAL symbols {
        auto& c = Collector::get_instance();
        auto arr = c.get_symbols_and_literals();
        
        std::vector<std::string> to_send;

        for(auto& e : arr) {
            if( std::holds_alternative<std::string>(e)) {
                to_send.push_back(std::get<std::string>(e));
            }
        }

        Asembler::file_actions.push_back(
            std::make_unique<directive_global>(to_send)
        );

        c.clear_symbols_and_literals();
    }
;
extern_directive:
    EXTERN symbols {
        auto& c = Collector::get_instance();
        auto arr = c.get_symbols_and_literals();
        
        std::vector<std::string> to_send;

        for(auto& e : arr) {
            if( std::holds_alternative<std::string>(e)) {
                to_send.push_back(std::get<std::string>(e));
            }
        }

        Asembler::file_actions.push_back(
            std::make_unique<directive_extern>(to_send)
        );

        c.clear_symbols_and_literals();

    }
;
section_directive:
    SECTION IDENTIFIER {
        auto& c = Collector::get_instance();

        Asembler::file_actions.push_back(
            std::make_unique<directive_section>(std::string($2))
        );
    }
;
word_directive:
    WORD symbols {
        auto& c = Collector::get_instance();

        auto arr = c.get_symbols_and_literals();

        Asembler::file_actions.push_back(
            std::make_unique<directive_word>(arr)
        );

        c.clear_symbols_and_literals();
    }
;
skip_directive:
    SKIP literal {
        auto& c = Collector::get_instance();
        Asembler::file_actions.push_back(
            std::make_unique<directive_skip>($2)
        );
    }
;
ascii_directive:
    ASCII STRING {
        Asembler::file_actions.push_back(
            std::make_unique<directive_ascii>(std::string($2))
        );
    }
;
equ_directive:
    EQU symbols {
        /* NOT DONE AND MAYBE WILL NEVER BE*/

        auto& c = Collector::get_instance();
        c.clear_symbols_and_literals();
    }
;
end_directive:
    END {
        
        Asembler::file_actions.push_back(
            std::make_unique<directive_end>()
        );

    }
;



%%
